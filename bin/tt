(function(){
    function hasattr(obj, name) {
        return name in obj;
    }
    function getattr(obj, name) {
        return obj[name];
    }
    function setattr(obj, name, value) {
        obj[name] = value;
    }
    var blank, bob, joe, angela, st, c, inc;
    function Blank() {}

    blank = Blank();

    assert.ok(blank instanceof Blank);

    Human = function(name){
        var self = this;
        self.name = name;
    };
    Human.prototype.greet = function(){
        var self = this;
        return "Hello, I'm " + self.name;
    };
    Human.getTypicalWeight = function(){
        return "150";
    };

    bob = Human("Bob");

    assert.equal(bob.greet(), "Hello, I'm Bob");

    assert.equal(Human.greet(bob), "Hello, I'm Bob");

    assert.equal(Human.getTypicalWeight(), "150");

    function Friend() {
        Human.prototype.constructor.apply(this, arguments);
    }
    Friend.prototype = new Human();
    Friend.prototype.constructor = Friend;
    Friend.prototype.greet = function(){
        var self = this;
        return "Yo, it's me, " + self.name;
    };

    joe = Friend("Joe");

    assert.equal(joe.greet(), "Yo, it's me, Joe");

    assert.ok(joe instanceof Friend);

    assert.ok(joe instanceof Human);

    OldFriend = function(name, duration){
        var self = this;
        self.duration = duration;
        Friend.__init__(self, name);
    };
    OldFriend.prototype = new Friend();
    OldFriend.prototype.constructor = OldFriend;
    OldFriend.prototype.how_long = function(){
        var self = this;
        return "I've known you for " + self.duration + " years";
    };

    angela = OldFriend("Angela", 8);

    assert.equal(angela.greet(), "Yo, it's me, Angela");

    assert.equal(angela.how_long(), "I've known you for 8 years");

    (function module() {
        function Stranger() {
            Human.prototype.constructor.apply(this, arguments);
        }
        Stranger.prototype = new Human();
        Stranger.prototype.constructor = Stranger;
        Stranger.prototype.greet = function(){
            var self = this;
            return Friend.greet(self);
        };
        dude = Stranger("some guy");
    })();

    assert.equal(dude.greet(), "Yo, it's me, some guy");

    assert.ok(hasattr(dude, "greet"));

    assert.equal(getattr(dude, "greet")(), "Yo, it's me, undefined");

    assert.equal(hasattr(dude, "stuff"), false);

    setattr(dude, "stuff", true);

    assert.ok(hasattr(dude, "stuff"));

    st = String("test");

    assert.equal(st, "test");

    assert.equal(st.toUpperCase(), "TEST");

    assert.equal(String.toUpperCase(st), "TEST");

    assert.equal(String.fromCharCode(65), "A");

    Counter = function(n){
        var s = this;
        if (typeof n === "undefined") n = 0;
        s.count = n;
    };
    Counter.prototype.getIncrementer = function(){
        var self = this;
        return function() {
            self.count += 1;
        };
    };

    c = Counter(5);

    inc = c.getIncrementer();

    inc();

    assert.equal(c.count, 6);
})();